using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using SamarPro.Reports;
using DevExpress.XtraReports.UI;
using System.Media;

namespace SamarPro.Views
{
    public partial class frmPos : Form
    {
        TransationModule TR = new TransationModule();
        string sql;
        SqlCommand CMD;
        SqlDataReader RED;

        CONTROLS.DataAccessLayer DAL = new CONTROLS.DataAccessLayer();
        CONTROLS.BusneisLayer BL = new CONTROLS.BusneisLayer();
        void CLEAR_TEXT_BOX(Control CN)
        {

            foreach (Control C in CN.Controls)
                if (C is TextBox)

                    ((TextBox)C).Clear();

                else

                    CLEAR_TEXT_BOX(C);

        }
        void GET_BILLS_ID()
        {
            DataTable DT = new DataTable();
            DT = BL.get_bill_id();
            int id = Convert.ToInt32(DT.Rows[DT.Rows.Count - 1][0]);
            LBL_BILL_NO.Text = id.ToString();
        }

        void Fill_ListView(int Bill_ID)
        {
            double totalprice;
            try
            {
                sql = "SELECT  TC.BARCODE,NAME,TC.QUANTITY,isNull(PAYMONEY,0) AS 'PRICE',TC.MONEY FROM POSPRODUCTS TC INNER JOIN PRODUCTS P ON P.BARCODE = TC.BARCODE WHERE TC.BILL_ID = '" + LBL_BILL_NO.Text + "'";

                CMD = new SqlCommand(sql, DAL.Sqlconnection);
                DAL.open();
                RED = CMD.ExecuteReader();

                ListViewItem x;
                this.ListView1.Items.Clear();
                totalprice = 0;

                while (RED.Read())
                {
                    totalprice = totalprice + Convert.ToDouble(RED[4]);
                    x = new ListViewItem(RED[1].ToString());
                    x.SubItems.Add(RED[2].ToString());
                    x.SubItems.Add(RED[3].ToString());
                    x.SubItems.Add(RED[4].ToString());
                    x.SubItems.Add(RED[0].ToString());

                    this.ListView1.Items.Add(x);
                }

                {
                    var withBlock = this;
                    withBlock.LBL_TOTAL_PRICE.Text = String.Format(totalprice.ToString(), "N2").ToString();
                    withBlock.LBL_BILL_PRICE.Text = String.Format(totalprice.ToString(), "N2").ToString();
                }
            }
            catch
            {
                return;
            }
            finally
            {
                CMD.Dispose();
                DAL.close();
            }

        }
        void delete_order(int Code, int ID)
        {
            db_model db = new db_model();
            PosProduct ac = (from c in db.PosProducts where c.Barcode == Code && c.Bill_ID == ID select c).FirstOrDefault();
            db.PosProducts.Where(a => a.Barcode == Code && a.Bill_ID == ID).Select(s => s).FirstOrDefault();
            db.Entry(ac).State = System.Data.Entity.EntityState.Deleted;
            db.SaveChanges();
        }
        void Minimaze_Quantity(int BarCode)
        {
            db_model db = new db_model();
            Product ac = (from c in db.Products where c.BarCode == BarCode select c).FirstOrDefault();
            db.Products.Where(s => s.BarCode == BarCode).Select(s => s).FirstOrDefault();
            ac.Quntity = ac.Quntity - Convert.ToInt32( txt_Quantity.Text);
            db.SaveChanges();
        }
        void MaxMaize_Quantity(int BarCode)
        {
            db_model db = new db_model();
            Product ac = (from c in db.Products where c.BarCode == BarCode select c).FirstOrDefault();
            db.Products.Where(s => s.BarCode == BarCode).Select(s => s).FirstOrDefault();
            ac.Quntity = ac.Quntity + Convert.ToInt32(Q);
            db.SaveChanges();
        }
        void combobox()
        {
            comb_Product.DataSource = BL.getProduct_Name();
            comb_Product.DisplayMember = "Name";
            comb_Product.ValueMember = "BarCode";
        }
        public frmPos()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource2.Fill();
        }

        private void bunifuImageButton1_Click(object sender, EventArgs e)
        {
            Close();
        }
       
        private void frmPos_Load(object sender, EventArgs e)
        {
            comb_Product.Items.Clear();
            comb_Product.AutoCompleteMode = AutoCompleteMode.Suggest;
            comb_Product.AutoCompleteSource = AutoCompleteSource.ListItems;
            

            txt_Employee.Text = Program.Casheir_Name;
            Enterydate.Text = DateTime.Now.ToShortDateString();
            BT_CANCEL.Enabled = false;
            BT_DEL.Enabled = false;
            BT_PAY.Enabled = false;
            BT_PRINT.Enabled = false;

            LBL_DATE.Text = DateTime.Now.ToShortDateString();
            txt_Quantity.Text = "0";
            txt_Money.Text = "0";
            ListView1.Columns[4].Width = 0;
        }

        private void comb_Product_KeyPress(object sender, KeyPressEventArgs e)
        {
            comb_Product.DroppedDown = false;
        }
        public int Bar;
        private void comb_Product_SelectedIndexChanged(object sender, EventArgs e)
        {          
            try
            {
                Bar = Convert.ToInt16(comb_Product.SelectedValue);
                db_model db = new db_model();
                var Result = db.Products.Where
                        (x => x.BarCode == Bar)
                        .Select(s => new
                        { Nam = s.Name, Bar = s.BarCode, discount = s.Discount, quan = s.Quntity, comm = s.Commation, supplayer = s.SUP_name }).ToList();
                if (Result.SingleOrDefault() != null)
                {
                    txt_Name.Text = Result.SingleOrDefault().Nam;
                    txt_BarCode.Text = Convert.ToString(Result.SingleOrDefault().Bar);
                    txt_QunInStoke.Text = Convert.ToString(Result.SingleOrDefault().quan);
                    txt_comm.Text = Convert.ToString(Result.SingleOrDefault().comm);
                    txt_supplayer.Text = Convert.ToString(Result.SingleOrDefault().supplayer);
                    txt_discount.Text = Convert.ToString(Result.SingleOrDefault().discount);
                }
                else
                {
                    TR.Show_Message("هذا المنتج غير موجود");
                }
            }
            catch
            {
                return;
            }
        }
        private void bunifuDatepicker2_onValueChanged(object sender, EventArgs e)
        {
        }

        private void txt_BarCode_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    int BR = Convert.ToInt16(txt_BarCode.Text);
                    db_model db = new db_model();
                    var Result = db.Products.Where
                            (x => x.BarCode == BR)
                            .Select(s => new
                            { Nam = s.Name, Bar = s.BarCode,discount =s.Discount, quan = s.Quntity ,comm = s.Commation ,supplayer = s.SUP_name}).ToList();
                    if (Result.SingleOrDefault() != null)
                    {
                        txt_Name.Text = Result.SingleOrDefault().Nam;
                        txt_BarCode.Text = Convert.ToString(Result.SingleOrDefault().Bar);
                        txt_QunInStoke.Text = Convert.ToString(Result.SingleOrDefault().quan);
                        txt_comm.Text = Convert.ToString(Result.SingleOrDefault().comm);
                        txt_supplayer.Text = Convert.ToString(Result.SingleOrDefault().supplayer);
                        txt_discount.Text = Convert.ToString(Result.SingleOrDefault().discount);
                    }
                    else
                    {
                        TR.Show_Message("هذا المنتج غير موجود");
                    }
                }
            }
            catch
            {
                return;
            }
            
        }

        private void BT_EXIT_Click(object sender, EventArgs e)
        {
            Dispose();
            Close();
        }

        private void BT_PAY_Click(object sender, EventArgs e)
        {
            if (txt_BarCode.Text == "" || txt_Money.Text == "0" || txt_Quantity.Text == "")
            {
                TR.Show_Message("الرجاء ملء الحقول أولاً");
                return;
            }
            foreach (ListViewItem ITEM in ListView1.Items)
            {
                string MESS = ITEM.SubItems[4].Text.ToString();
                if (txt_BarCode.Text == MESS)
                {
                    TR.Show_Message("تنبيه ! تم إضافة هذا المنتج من قبل  ");
                    return;
                }
            }
            try
            {
                db_model db = new db_model();
                PosProduct ac = new PosProduct
                {
                    Bill_ID =  Convert.ToInt32(LBL_BILL_NO.Text),
                    Barcode = Convert.ToInt32(txt_BarCode.Text),
                    Quantity = Convert.ToInt32(txt_Quantity.Text),
                    Note = txt_Note.Text,
                    EmpName = txt_Employee.Text,
                    Money = Convert.ToDouble(txt_Money.Text),
                    DayDate = Enterydate.Value,
                    Sup_Name = txt_supplayer.Text
                };

                db.Entry(ac).State = System.Data.Entity.EntityState.Added;
                db.SaveChanges();

                Minimaze_Quantity(Convert.ToInt32(txt_BarCode.Text));
                Fill_ListView(Convert.ToInt32(LBL_BILL_NO.Text));
                SoundPlayer notif = new SoundPlayer(Properties.Resources.notification);
                notif.Play();
                CLEAR_TEXT_BOX(this);
                txt_Quantity.Text = "0";
                txt_Money.Text = "0";
                txt_Price.Text = "0";
                txt_Employee.Text = Program.Casheir_Name;
            }
            catch
            {
                return;
            }
            Enterydate.Text = DateTime.Now.ToShortDateString();
            BT_DEL.Enabled = true;
        }

        private void txt_Quantity_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                Decimal PRICE = Convert.ToDecimal(txt_Price.Text);
                Decimal QUN = Convert.ToDecimal(txt_Quantity.Text);
                Decimal Disc = Convert.ToDecimal(txt_discount.Text);
                Decimal TOTAL_PRICE = (QUN * PRICE) - Disc;
                txt_Money.Text = TOTAL_PRICE.ToString();
            }
            catch
            {
                return;
            }
        }

        private void txt_Quantity_Leave(object sender, EventArgs e)
        {
            try
            {
                if (Convert.ToInt32(txt_Quantity.Text) > Convert.ToInt32(txt_QunInStoke.Text))
                {
                    txt_Quantity.Focus();
                    TR.Show_Message("الكمية المطلوبة غير متوفرة حالياً");
                }
            }
            catch
            {
                return;

            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            button1.Enabled = false;
            GET_BILLS_ID();
            tabControl1.Enabled = true;
            BT_PAY.Enabled = true;
            combobox();
            CLEAR_TEXT_BOX(this);
            txt_Quantity.Text = "0";
            txt_Price.Text = "0";
            txt_Employee.Text = Program.Casheir_Name;
            BT_CANCEL.Enabled = true;
            BT_REPORT.Enabled = true;
            BT_PRINT.Enabled = true;
            BT_EXIT.Enabled = false;
        }

        private void BT_PRINT_Click(object sender, EventArgs e)
        {
            BT_PAY.Enabled = false;
            BT_PRINT.Enabled = false;
            BT_CANCEL.Enabled = false;
            button1.Enabled = true;
            this.Cursor = Cursors.WaitCursor;
            Pos_Invoice TK = new Pos_Invoice();
            TK.Parameters["BILLS_NO"].Value = Convert.ToInt32(LBL_BILL_NO.Text);
            ReportPrintTool printTool = new ReportPrintTool(TK);
            printTool.PreviewForm.StartPosition = FormStartPosition.CenterScreen;
            printTool.ShowPreviewDialog();
            this.Cursor = Cursors.Default;
            BT_EXIT.Enabled = true;

            ListView1.Items.Clear();        
            BT_DEL.Enabled = false;
            tabControl1.Enabled = false;
        }

        private void BT_REPORT_Click(object sender, EventArgs e)
        {
            BT_PAY.Enabled = false;
            BT_PRINT.Enabled = false;
            BT_CANCEL.Enabled = false;
            button1.Enabled = true;
            BT_EXIT.Enabled = true;

            this.Cursor = Cursors.WaitCursor;
            Invoice_Report TK = new Invoice_Report();
            TK.Parameters["BILLS_NO"].Value = Convert.ToInt32(LBL_BILL_NO.Text);
            ReportPrintTool printTool = new ReportPrintTool(TK);
            printTool.PreviewForm.StartPosition = FormStartPosition.CenterScreen;
            printTool.ShowPreviewDialog();
            LBL_BILL_NO.Text = "0";
            ListView1.Items.Clear();
            BT_DEL.Enabled = false;
            tabControl1.Enabled = false;
        }

        private void BT_CANCEL_Click(object sender, EventArgs e)
        {

            if (ListView1.Items.Count > 0)
            {
                TR.Show_Message("الرجاء مسح جميع المنتجات الموجودة في القائمة");
                BT_CANCEL.Enabled = true;
                BT_PAY.Enabled = true;
                return;

            }

            if (MessageBox.Show("هل أنت متأكد من الغاء الفاتورة ؟", " تنبيه", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
            {
                TR.Show_Message("تم إلغاء الفاتورة");
                BT_PRINT.Enabled = false;
                BT_PAY.Enabled = false;
                BT_DEL.Enabled = false;
            }
            BT_PRINT.Enabled = false;
            BT_PAY.Enabled = false;
            BT_DEL.Enabled = false;
            BT_CANCEL.Enabled = false;
            
          
        }
        string Q; string M = "";
        private void BT_DEL_Click(object sender, EventArgs e)
        {
            try
            {
                if (ListView1.FocusedItem.Selected == false)
                {
                    TR.Show_Message("الرجاء إختيار منتج من القائمة");
                    return;
                }

                else if (MessageBox.Show("  هل تريد حذف هذا المنتج   ", " تنبيه", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                {
                    M = ListView1.SelectedItems[0].SubItems[4].Text;
                    Q = ListView1.SelectedItems[0].SubItems[1].Text;
                    MaxMaize_Quantity(Convert.ToInt32(M));
                    delete_order(Convert.ToInt32(M), Convert.ToInt32(LBL_BILL_NO.Text));
                    this.ListView1.Items.Clear();
                    Fill_ListView(Convert.ToInt32(LBL_BILL_NO.Text));
                    TR.Show_Message("تم حذف المنتج");
                }
            }
            catch
            {
                return;
            }
            }

        private void txt_Quantity_KeyPress(object sender, KeyPressEventArgs e)
        {
            CONTROLS.DropShaddow dr = new CONTROLS.DropShaddow();
            dr.JustNumber(e);
        }

        private void com_PayType_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                    int BR = Convert.ToInt16(txt_BarCode.Text);
                    db_model db = new db_model();
                    var Result = db.Products.Where
                            (x => x.BarCode == BR)
                            .Select(s => new
                            { Tajzaa = s.PAYmoney,Joumla = s.JoumlaRmoney  }).ToList();
                    if (Result.SingleOrDefault() != null)
                    {
                    if(com_PayType.Text =="جملة")
                    {
                        txt_Price.Text = Convert.ToString(Result.SingleOrDefault().Joumla);
                    }
                    else if(com_PayType.Text == "تجزئة")
                    {
                        txt_Price.Text = Convert.ToString(Result.SingleOrDefault().Tajzaa);
                    }
                    }
                    else
                    {
                        TR.Show_Message("السعر غير متاح حالياً");
                    }
            }
            catch
            {
                return;
            }
        }

        private void txt_discount_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                Decimal PRICE = Convert.ToDecimal(txt_Price.Text);
                Decimal QUN = Convert.ToDecimal(txt_Quantity.Text);
                Decimal Disc = Convert.ToDecimal(txt_discount.Text);
                Decimal TOTAL_PRICE = (QUN * PRICE) - Disc;
                txt_Money.Text = TOTAL_PRICE.ToString();
            }
            catch
            {
                return;
            }
        }
    }
}
